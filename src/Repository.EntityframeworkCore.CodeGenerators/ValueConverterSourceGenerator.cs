using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Diagnostics;
using System.Linq;
using System.Reflection.Emit;

namespace NetCorePal.Extensions.Repository.EntityframeworkCore.CodeGenerators
{
    [Generator]
    public class ValueConverterSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {

            var compilation = context.Compilation;
            foreach (var syntaxTree in compilation.SyntaxTrees)
            {
                if (syntaxTree.TryGetText(out var sourceText) &&
                    !sourceText.ToString().Contains("IEntityId"))
                {
                    continue;
                }
                var semanticModel = compilation.GetSemanticModel(syntaxTree);
                if (semanticModel == null)
                {
                    continue;
                }

                var typeDeclarationSyntaxs = syntaxTree.GetRoot().DescendantNodesAndSelf().OfType<TypeDeclarationSyntax>();
                foreach (var tds in typeDeclarationSyntaxs)
                {
                    Generate(context, semanticModel, tds);
                }

            }
        }

        private void Generate(GeneratorExecutionContext context, SemanticModel semanticModel, TypeDeclarationSyntax classDef)
        {
            var symbol = semanticModel.GetDeclaredSymbol(classDef);
            if (!(symbol is INamedTypeSymbol)) return;
            INamedTypeSymbol namedTypeSymbol = (INamedTypeSymbol)symbol;
            var hasStronglyTypedIdAttr = namedTypeSymbol.Interfaces
                .SingleOrDefault(t => t.Name == "IEntityId");
            if (hasStronglyTypedIdAttr == null) return;
            string ns = namedTypeSymbol.ContainingNamespace.Name;
            string className = namedTypeSymbol.Name;

            var constructor = namedTypeSymbol.Constructors.FirstOrDefault(t => t.Parameters.Count() == 1);

            if (constructor == null)
            {
                return;
            }
            var param = constructor.Parameters.First();
            string source = $@"// <auto-generated/>
using System;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
namespace {ns}
{{
    public partial class {className}ValueConverter : ValueConverter<{className}, {param.Type.Name}>
    {{
        public  {className}ValueConverter() : base(p => p.Id, p => new {className}(p)) {{ }}
    }}
}}
";
            context.AddSource($"{className}ValueConverter.g.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {

        }
    }
}